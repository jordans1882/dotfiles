let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
noremap <buffer> <silent> \gN :call b:PreviousRChunk()
noremap <buffer> <silent> \gn :call b:NextRChunk()
noremap <buffer> <silent> \gt :call SyncTeX_forward(1)
noremap <buffer> <silent> \gp :call SyncTeX_forward()
vnoremap <buffer> <silent> \op :call ROpenPDF("Get Master")
nnoremap <buffer> <silent> \op :call ROpenPDF("Get Master")
onoremap <buffer> <silent> \op :call ROpenPDF("Get Master")
noremap <buffer> <silent> \ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> \cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> \ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> \cc :call b:SendChunkToR("silent", "stay")
vnoremap <buffer> <silent> \si :call RnwToggleIndentSty()
nnoremap <buffer> <silent> \si :call RnwToggleIndentSty()
onoremap <buffer> <silent> \si :call RnwToggleIndentSty()
vnoremap <buffer> <silent> \kb :call RWeave("bibtex", 1, 1)
nnoremap <buffer> <silent> \kb :call RWeave("bibtex", 1, 1)
onoremap <buffer> <silent> \kb :call RWeave("bibtex", 1, 1)
vnoremap <buffer> <silent> \kp :call RWeave("nobib", 1, 1)
vnoremap <buffer> <silent> \kn :call RWeave("nobib", 1, 0)
nnoremap <buffer> <silent> \kn :call RWeave("nobib", 1, 0)
onoremap <buffer> <silent> \kn :call RWeave("nobib", 1, 0)
vnoremap <buffer> <silent> \sb :call RWeave("bibtex", 0, 1)
nnoremap <buffer> <silent> \sb :call RWeave("bibtex", 0, 1)
onoremap <buffer> <silent> \sb :call RWeave("bibtex", 0, 1)
vnoremap <buffer> <silent> \sp :call RWeave("nobib", 0, 1)
nnoremap <buffer> <silent> \sp :call RWeave("nobib", 0, 1)
onoremap <buffer> <silent> \sp :call RWeave("nobib", 0, 1)
vnoremap <buffer> <silent> \sw :call RWeave("nobib", 0, 0)
nnoremap <buffer> <silent> \sw :call RWeave("nobib", 0, 0)
onoremap <buffer> <silent> \sw :call RWeave("nobib", 0, 0)
vnoremap <buffer> <silent> \rd :call RSetWD()
nnoremap <buffer> <silent> \rd :call RSetWD()
onoremap <buffer> <silent> \rd :call RSetWD()
vnoremap <buffer> <silent> \ko :call RMakeRmd("odt")
nnoremap <buffer> <silent> \ko :call RMakeRmd("odt")
onoremap <buffer> <silent> \ko :call RMakeRmd("odt")
vnoremap <buffer> <silent> \kh :call RMakeRmd("html_document")
nnoremap <buffer> <silent> \kh :call RMakeRmd("html_document")
onoremap <buffer> <silent> \kh :call RMakeRmd("html_document")
vnoremap <buffer> <silent> \kw :call RMakeRmd("word_document")
nnoremap <buffer> <silent> \kw :call RMakeRmd("word_document")
onoremap <buffer> <silent> \kw :call RMakeRmd("word_document")
vnoremap <buffer> <silent> \kl :call RMakeRmd("beamer_presentation")
nnoremap <buffer> <silent> \kl :call RMakeRmd("beamer_presentation")
onoremap <buffer> <silent> \kl :call RMakeRmd("beamer_presentation")
nnoremap <buffer> <silent> \kp :call RWeave("nobib", 1, 1)
onoremap <buffer> <silent> \kp :call RWeave("nobib", 1, 1)
vnoremap <buffer> <silent> \kr :call RMakeRmd("default")
nnoremap <buffer> <silent> \kr :call RMakeRmd("default")
onoremap <buffer> <silent> \kr :call RMakeRmd("default")
vnoremap <buffer> <silent> \r- :call RBrOpenCloseLs(0)
nnoremap <buffer> <silent> \r- :call RBrOpenCloseLs(0)
onoremap <buffer> <silent> \r- :call RBrOpenCloseLs(0)
vnoremap <buffer> <silent> \r= :call RBrOpenCloseLs(1)
nnoremap <buffer> <silent> \r= :call RBrOpenCloseLs(1)
onoremap <buffer> <silent> \r= :call RBrOpenCloseLs(1)
vnoremap <buffer> <silent> \ro :call RObjBrowser()
nnoremap <buffer> <silent> \ro :call RObjBrowser()
onoremap <buffer> <silent> \ro :call RObjBrowser()
vnoremap <buffer> <silent> \rb :call RAction("plotsumm", "v")
vnoremap <buffer> <silent> \rg :call RAction("plot", "v")
vnoremap <buffer> <silent> \rs :call RAction("summary", "v")
nnoremap <buffer> <silent> \rb :call RAction("plotsumm")
onoremap <buffer> <silent> \rb :call RAction("plotsumm")
nnoremap <buffer> <silent> \rg :call RAction("plot")
onoremap <buffer> <silent> \rg :call RAction("plot")
nnoremap <buffer> <silent> \rs :call RAction("summary")
onoremap <buffer> <silent> \rs :call RAction("summary")
vnoremap <buffer> <silent> \rh :call RAction("help")
nnoremap <buffer> <silent> \rh :call RAction("help")
onoremap <buffer> <silent> \rh :call RAction("help")
vnoremap <buffer> <silent> \re :call RAction("example")
nnoremap <buffer> <silent> \re :call RAction("example")
onoremap <buffer> <silent> \re :call RAction("example")
vnoremap <buffer> <silent> \ra :call RAction("args")
nnoremap <buffer> <silent> \ra :call RAction("args")
onoremap <buffer> <silent> \ra :call RAction("args")
vnoremap <buffer> <silent> \tp :call RAction("printtab", "v")
vnoremap <buffer> <silent> \td :call RAction("dputtab", "v")
vnoremap <buffer> <silent> \rv :call RAction("viewdf", "v")
vnoremap <buffer> <silent> \rt :call RAction("str", "v")
vnoremap <buffer> <silent> \rn :call RAction("nvim.names", "v")
vnoremap <buffer> <silent> \rp :call RAction("print", "v")
nnoremap <buffer> <silent> \tp :call RAction("printtab")
onoremap <buffer> <silent> \tp :call RAction("printtab")
nnoremap <buffer> <silent> \td :call RAction("dputtab")
onoremap <buffer> <silent> \td :call RAction("dputtab")
nnoremap <buffer> <silent> \rv :call RAction("viewdf")
onoremap <buffer> <silent> \rv :call RAction("viewdf")
nnoremap <buffer> <silent> \rt :call RAction("str")
onoremap <buffer> <silent> \rt :call RAction("str")
nnoremap <buffer> <silent> \rn :call RAction("nvim.names")
onoremap <buffer> <silent> \rn :call RAction("nvim.names")
nnoremap <buffer> <silent> \rp :call RAction("print")
onoremap <buffer> <silent> \rp :call RAction("print")
vnoremap <buffer> <silent> \rm :call RClearAll()
nnoremap <buffer> <silent> \rm :call RClearAll()
onoremap <buffer> <silent> \rm :call RClearAll()
vnoremap <buffer> <silent> \rr :call RClearConsole()
nnoremap <buffer> <silent> \rr :call RClearConsole()
onoremap <buffer> <silent> \rr :call RClearConsole()
vnoremap <buffer> <silent> \rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> \rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> \rl :call g:SendCmdToR("ls()")
let s:cpo_save=&cpo
set cpo&vim
noremap <buffer> <silent> \r<Right> :call RSendPartOfLine("right", 0)
noremap <buffer> <silent> \r<Left> :call RSendPartOfLine("left", 0)
vnoremap <buffer> <silent> \o :call RWarningMsg("This command does not work over a selection of lines.")
nnoremap <buffer> <silent> \o :call SendLineToRAndInsertOutput()0
onoremap <buffer> <silent> \o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> \d :call SendLineToR("down")0
noremap <buffer> <silent> \l :call SendLineToR("stay")
noremap <buffer> <silent> \ch :call SendFHChunkToR()
noremap <buffer> <silent> \pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> \pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> \pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> \pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> \so :call SendSelectionToR("echo", "stay", "NewtabInsert")
vnoremap <buffer> <silent> \sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> \sd :call SendSelectionToR("silent", "down")
vnoremap <buffer> <silent> \se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> \ss :call SendSelectionToR("silent", "stay")
vnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
noremap <buffer> <silent> \ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> \bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> \be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> \bb :call SendMBlockToR("silent", "stay")
vnoremap <buffer> <silent> \; :call MovePosRCodeComment("selection")
nnoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
vnoremap <buffer> <silent> \xu :call RSimpleCommentLine("selection", "u")
nnoremap <buffer> <silent> \xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> \xu :call RSimpleCommentLine("normal", "u")
vnoremap <buffer> <silent> \xc :call RSimpleCommentLine("selection", "c")
nnoremap <buffer> <silent> \xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> \xc :call RSimpleCommentLine("normal", "c")
vnoremap <buffer> <silent> \xx :call RComment("selection")
nnoremap <buffer> <silent> \xx :call RComment("normal")
onoremap <buffer> <silent> \xx :call RComment("normal")
vnoremap <buffer> <silent> \rw :call RQuit('save')
nnoremap <buffer> <silent> \rw :call RQuit('save')
onoremap <buffer> <silent> \rw :call RQuit('save')
vnoremap <buffer> <silent> \rq :call RQuit('nosave')
nnoremap <buffer> <silent> \rq :call RQuit('nosave')
onoremap <buffer> <silent> \rq :call RQuit('nosave')
vnoremap <buffer> <silent> \rc :call StartR("custom")
nnoremap <buffer> <silent> \rc :call StartR("custom")
onoremap <buffer> <silent> \rc :call StartR("custom")
vnoremap <buffer> <silent> \rf :call StartR("R")
nnoremap <buffer> <silent> \rf :call StartR("R")
onoremap <buffer> <silent> \rf :call StartR("R")
inoremap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> < :call RWriteChunk()a
inoremap <buffer> <silent> _ :call ReplaceUnderS()a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=b:%,b:#,b:##,b:###,b:#'
setlocal commentstring=%%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal cursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=\\\\\\([egx]\\|char\\|mathchar\\|count\\|dimen\\|muskip\\|skip\\|toks\\)\\=def\\|\\\\font\\|\\\\\\(future\\)\\=let\\|\\\\new\\(count\\|dimen\\|skip\\|muskip\\|box\\|toks\\|read\\|write\\|fam\\|insert\\)\\|\\\\\\(re\\)\\=new\\(boolean\\|command\\|counter\\|environment\\|font\\|if\\|length\\|savebox\\|theorem\\(style\\)\\=\\)\\s*\\*\\=\\s*{\\=\\|DeclareMathOperator\\s*{\\=\\s*
setlocal dictionary=
setlocal diff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'rnoweb'
setlocal filetype=rnoweb
endif
setlocal fixendofline
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=diff
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=\\\\input\\|\\\\include{
setlocal includeexpr=substitute(v:fname,\ '^.\\{-}{\\|}.*',\ '',\ 'g')
setlocal indentexpr=GetRnowebIndent()
setlocal indentkeys=0{,0},!^F,o,O,e,},=bibitem,=item
setlocal noinfercase
setlocal iskeyword=@,48-57,_,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=CompleteR
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal scrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal signcolumn=auto
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(2)
setlocal suffixesadd=.bib,.tex
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'rnoweb'
setlocal syntax=rnoweb
endif
setlocal tabstop=2
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 304 - ((303 * winheight(0) + 18) / 37)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
304
normal! 016|
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
